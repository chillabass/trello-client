[{"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/ProfileInfo.tsx":"1","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/CreateButton.tsx":"2","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/LoadAvatar.tsx":"3","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/userActions.ts":"4","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/Desk.tsx":"5","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/ProfileDesks.tsx":"6","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/deskActions.ts":"7","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/Header.tsx":"8","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/Column.tsx":"9","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/index.tsx":"10","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/reportWebVitals.ts":"11","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/App.tsx":"12","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/store.ts":"13","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/SignIn.tsx":"14","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/SignUp.tsx":"15","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/Main.tsx":"16","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/NotFound.tsx":"17","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/Profile.tsx":"18","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/hoc/PrivateRouter.tsx":"19","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/hooks.ts":"20","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/BoardHeader.tsx":"21","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/CreatingForm.tsx":"22","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/FormItem.tsx":"23","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/config/index.ts":"24","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/Task.tsx":"25","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/EditProfileForm.tsx":"26","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/CreateItem.tsx":"27","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/columnActions.ts":"28","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/taskAction.ts":"29","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/TaskEditForm.tsx":"30","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/columnSlicer.ts":"31","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/userSlicer.ts":"32","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/taskSlicer.ts":"33","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/deskSlicer.ts":"34","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/ColumnEditForm.tsx":"35","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/DeskEditForm.tsx":"36","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/TaskCreateForm.tsx":"37","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/services/utils/itemsOrder.ts":"38","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/services/api/index.ts":"39"},{"size":3567,"mtime":1649148752896,"results":"40","hashOfConfig":"41"},{"size":851,"mtime":1648480731382,"results":"42","hashOfConfig":"41"},{"size":1458,"mtime":1648119103440,"results":"43","hashOfConfig":"41"},{"size":3644,"mtime":1649159325755,"results":"44","hashOfConfig":"41"},{"size":4150,"mtime":1649162991006,"results":"45","hashOfConfig":"41"},{"size":1403,"mtime":1648649685215,"results":"46","hashOfConfig":"41"},{"size":2356,"mtime":1649159394715,"results":"47","hashOfConfig":"41"},{"size":1820,"mtime":1648557128610,"results":"48","hashOfConfig":"41"},{"size":7055,"mtime":1649080158833,"results":"49","hashOfConfig":"41"},{"size":473,"mtime":1649160420840,"results":"50","hashOfConfig":"41"},{"size":425,"mtime":1648106947252,"results":"51","hashOfConfig":"41"},{"size":1400,"mtime":1649160865020,"results":"52","hashOfConfig":"41"},{"size":516,"mtime":1648557134858,"results":"53","hashOfConfig":"41"},{"size":2099,"mtime":1649148362963,"results":"54","hashOfConfig":"41"},{"size":3786,"mtime":1649148386374,"results":"55","hashOfConfig":"41"},{"size":1567,"mtime":1648106947252,"results":"56","hashOfConfig":"41"},{"size":308,"mtime":1648106947252,"results":"57","hashOfConfig":"41"},{"size":508,"mtime":1648106947252,"results":"58","hashOfConfig":"41"},{"size":417,"mtime":1648106947252,"results":"59","hashOfConfig":"41"},{"size":281,"mtime":1648106947252,"results":"60","hashOfConfig":"41"},{"size":620,"mtime":1648106947252,"results":"61","hashOfConfig":"41"},{"size":1635,"mtime":1648720493748,"results":"62","hashOfConfig":"41"},{"size":758,"mtime":1649148345128,"results":"63","hashOfConfig":"41"},{"size":164,"mtime":1649145314436,"results":"64","hashOfConfig":"41"},{"size":1883,"mtime":1649073853861,"results":"65","hashOfConfig":"41"},{"size":1837,"mtime":1648551528684,"results":"66","hashOfConfig":"41"},{"size":1942,"mtime":1649147571848,"results":"67","hashOfConfig":"41"},{"size":3218,"mtime":1649174383839,"results":"68","hashOfConfig":"41"},{"size":2268,"mtime":1649161445118,"results":"69","hashOfConfig":"41"},{"size":4207,"mtime":1648720482285,"results":"70","hashOfConfig":"41"},{"size":2315,"mtime":1649071581600,"results":"71","hashOfConfig":"41"},{"size":2534,"mtime":1648478251140,"results":"72","hashOfConfig":"41"},{"size":1757,"mtime":1649068349219,"results":"73","hashOfConfig":"41"},{"size":2782,"mtime":1649071471694,"results":"74","hashOfConfig":"41"},{"size":1988,"mtime":1649072694989,"results":"75","hashOfConfig":"41"},{"size":1968,"mtime":1649147567856,"results":"76","hashOfConfig":"41"},{"size":3194,"mtime":1648719562093,"results":"77","hashOfConfig":"41"},{"size":688,"mtime":1649071383016,"results":"78","hashOfConfig":"41"},{"size":670,"mtime":1649173602475,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},"9vvxss",{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"84"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"84"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"84"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"84"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"186","messages":"187","suppressedMessages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"84"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"84"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"84"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/ProfileInfo.tsx",["210"],[],"import React, { useState } from 'react';\nimport { Avatar, Box, Button, Container, Link, Typography } from '@mui/material';\nimport { styled } from '@mui/styles';\nimport { IUser } from '../types/user';\nimport { useNavigate } from 'react-router';\nimport { getUser, signout } from '../store/slicers/userSlicer';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { EditFormDialog } from './EditProfileForm';\nimport { IEditData } from '../types/editProfile';\nimport { fetchChangeAvatar, fetchEditProfile } from '../store/asyncActions/userActions';\nimport { FileFormDialog } from './LoadAvatar';\nimport { IAvatar } from '../types/avatar';\nimport { PROTOCOL, SERVER_HOST, SERVER_PORT } from '../config';\n\nexport const ProfileInfo: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const user: IUser = useAppSelector(getUser);\n  const [formActive, setFormActive] = useState(false);\n  const [avatarActive, setAvatarActive] = useState(false);\n\n  const getData = (data: IEditData) => {\n    console.log(data);\n    dispatch(fetchEditProfile(data));\n  }\n\n  const clickAvatarHandler = () => {\n    setAvatarActive(true)\n  }\n\n  const getAvatar = (data: IAvatar) => {\n    dispatch(fetchChangeAvatar(data));\n  }\n\n  const clickEditHandler = () => {\n    setFormActive(true);\n  };\n\n  const clickSignoutHandler = () => {\n    dispatch(signout(''));\n    navigate('/');\n  };\n\n  return (\n    <StyledContainer>\n      <StyledInfoLeft>\n        <StyledAvatar src={`${PROTOCOL}://${SERVER_HOST}:${SERVER_PORT}/${user.avatar}`}/>\n        <Button\n          color='primary'\n          onClick={clickAvatarHandler}\n          variant='contained'\n        >\n          Change Avatar\n        </Button>\n      </StyledInfoLeft>\n      <StyledInfoRight>\n        <StyledTypography\n          variant=\"body1\"\n          gutterBottom>\n          {`Login: ${user.login}`}\n        </StyledTypography>\n        <StyledTypography\n          variant=\"body1\"\n          gutterBottom>\n          {`Full name: ${user.fullName}`}\n        </StyledTypography>\n        <StyledTypography\n          variant=\"body1\"\n          gutterBottom>\n          {`E-Mail: ${user.email}`}\n        </StyledTypography>\n        <Button\n          color='primary'\n          onClick={clickEditHandler}\n          variant='contained'\n          style={{ marginRight: '15px', marginBottom: '15px' }}>\n          Редактировать\n        </Button>\n        <Button\n          color='error'\n          onClick={clickSignoutHandler}\n          variant='contained'>\n          Выйти\n        </Button>\n        <EditFormDialog\n            open={formActive}\n            setOpen={setFormActive}\n            getData={getData}\n        />\n        <FileFormDialog \n          open={avatarActive}\n          setOpen={setAvatarActive}\n          getData={getAvatar}\n        />\n      </StyledInfoRight>\n    </StyledContainer>\n  )\n}\n\nconst StyledContainer = styled(Container)({\n  display: 'flex',\n  justifyContent: 'flex-start',\n  flexDirection: 'row',\n  padding: '30px',\n});\n\n\nconst StyledInfoLeft = styled(Box)({\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  margin: '10px',\n});\n\nconst StyledAvatar = styled(Avatar)({\n  minWidth: 100,\n  minHeight: 100,\n  margin: '15px',\n});\n\nconst StyledInfoRight = styled(Box)({\n  maxWidth: 800,\n  marginBottom: '20px',\n  marginRight: '20px',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'flex-start',\n  justifyContent: 'center'\n});\n\nconst StyledTypography = styled(Typography)({\n  display: 'flex',\n  flexDirection: 'column',\n});\n",["211","212"],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/CreateButton.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/LoadAvatar.tsx",["213"],[],"import React, { SyntheticEvent } from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { IAvatar } from '../types/avatar';\n\ninterface FormProps {\n  open: boolean;\n  setOpen: (flag: boolean) => void;\n  getData: (data: IAvatar) => void;\n};\n\nexport const FileFormDialog: React.FC<FormProps> = ({open, setOpen, getData, }) => {\n  const avatar: IAvatar = {\n    name: '',\n    file: '',\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleChangeFile = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      avatar.name = e.target.files[0].name;\n      avatar.file = e.target.files[0];\n    }\n  };\n\n  const handleUpload = () => {\n    handleClose();\n    if (avatar) { \n      getData(avatar);\n    }\n  };\n\n  return (\n    <div>\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Load file</DialogTitle>\n        <DialogContent>\n          <input \n            type=\"file\"\n            accept='.jpg,.jpeg,.png'\n            onChange={handleChangeFile}     \n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleUpload}>Upload</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/userActions.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/Desk.tsx",["214"],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/ProfileDesks.tsx",["215"],[],"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { CreateItem } from './CreateItem';\nimport { fetchAddDesk } from '../store/asyncActions/deskActions';\n\nimport { useAppSelector, useAppDispatch } from '../store/hooks';\nimport { CreateButton } from './CreateButton';\nimport { FormDialog as Form } from './CreatingForm';\n\nexport const ProfileDesks: React.FC = () => {\n  const [formActive, setFormActive] = useState(false);\n  const desks = useAppSelector(state => state.desks.desks);\n  const dispatch = useAppDispatch();\n\n  const addClickHandler = () => {\n    setFormActive(true);\n  };\n\n  const getTitle = (title: string) => {\n    if (title) dispatch(fetchAddDesk(title));\n  }\n\n  return (\n    <StyledContainer>\n      {desks.map((desk: { title: string; id: string; })=> {\n      return (\n        <CreateItem\n          title={desk.title}\n          href={`${desk.id}`}\n        />\n      );\n    })}\n      <CreateButton\n        title='Create desk!'\n        onClick={addClickHandler}\n      />\n    <Form \n      open={formActive} \n      setOpen={setFormActive}\n      dialogTitle='Desk name'\n      dialogContentText='Enter desk name'\n      label='Desk name'\n      getData={getTitle}\n    />\n    </StyledContainer>\n  );\n};\n\n\nconst StyledContainer = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: row;\n  flex-wrap: wrap;\n  padding: 30px;\n`;\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/deskActions.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/Header.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/Column.tsx",["216"],[],"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport plusIcon from '../img/plus.svg';\nimport editIcon from '../img/edit.svg';\nimport { Task } from './Task';\nimport { useAppDispatch, useAppSelector } from '../store/hooks';\nimport { ITask } from '../types/task';\nimport { TaskCreateForm } from './TaskCreateForm';\nimport { fetchAddTask, fetchEditTask, fetchMoveTask } from '../store/asyncActions/taskAction';\nimport { getTasks, moveTask } from '../store/slicers/taskSlicer';\nimport { ColumnsEditForm } from './ColumnEditForm';\nimport { Container, Draggable, DropResult } from 'react-smooth-dnd';\nimport { getColumns, updateTaskPositions } from '../store/slicers/columnSlicer';\nimport { IColumn } from '../types/column';\nimport { applyDrag, sortItemsByPositions } from '../services/utils/itemsOrder';\nimport { fetchUpdateTaskPositions } from '../store/asyncActions/columnActions';\n\ninterface ColumnProps {\n  id: number;\n  deskId: number;\n  title: string;\n}\n\nexport const Column: React.FC<ColumnProps> = ({ id, deskId, title }) => {\n  const dispatch = useAppDispatch();\n\n  const [formActive, setFormActive] = useState(false);\n  const [editFormActive, setEditFormActive] = useState(false);\n  const [byDesc, setByDesc] = useState(true);\n\n  const allColumns: IColumn[] = useAppSelector(getColumns);\n  const index = allColumns.findIndex(column => column.id === id);\n  const positions = allColumns[index].positions;\n\n  const allTasks: ITask[] = useAppSelector(getTasks);\n  const tasks: ITask[] = allTasks.filter((task: ITask) => task.columnId === id);\n\n  const addTaskHandler = () => {\n    setFormActive(true);\n  };\n\n  const editHandler = () => {\n    setEditFormActive(true);\n  };\n\n  const sortHandler = () => {\n    const sortedPositions  = byDesc ? \n    tasks.sort((a, b) => b.priority - a.priority).map(item => item.id) :\n    tasks.sort((a, b) => a.priority - b.priority).map(item => item.id);\n    setByDesc(!byDesc);\n    dispatch(updateTaskPositions({id, pos: sortedPositions}));\n  }  \n\n  const getData = (title: string, priority: number) => {\n    const columnId = id;\n    if (title) dispatch(fetchAddTask({ title, columnId, priority }));\n  };\n\n  const onTaskDrop = (columnId: number, dropResult: DropResult) => {\n    console.log('onTaskDrop:', dropResult);\n    if (dropResult.removedIndex !== null || dropResult.addedIndex !== null) {\n      const index = allColumns.findIndex(column => column.id === id);\n      const positions = allColumns[index].positions;    \n      const newPositions = applyDrag(positions, dropResult);\n      console.log(`colId: ${columnId}, positions:\\n${newPositions}`);\n      dispatch(updateTaskPositions({id: columnId, pos: newPositions})); // update positions in columns on frontend\n      if (dropResult.addedIndex !== null) {\n        dispatch(moveTask({id: dropResult.payload.id, columnId,}));\n        dispatch(fetchMoveTask({id: dropResult.payload.id, columnId,}));\n      }\n      dispatch(fetchUpdateTaskPositions({columnId, positions: newPositions})); // update positions in columns  on backend\n    }\n  };\n\n  const getTaskPayload = (id: number, index: number) => {\n    return tasks.filter(task => task.columnId === id)[index];\n  }\n\n  return (\n    <StyledColumn>\n      <StyledColumnHeader>\n        <StyledColumnTitle className='column-drag-handle'>{title}</StyledColumnTitle>\n        <StyledColumnMenu>\n          <StyledMenu className='styled-menu'>\n            <StyledColumnButton onClick={sortHandler}>Sort</StyledColumnButton>\n            <StyledColumnButton onClick={editHandler}>Edit</StyledColumnButton>\n          </StyledMenu>\n        </StyledColumnMenu>\n\n      </StyledColumnHeader>\n      <Container\n        groupName=\"col\"\n        onDragStart={e => console.log(\"drag started\", e)}\n        onDragEnd={e => console.log(\"drag end\", e)}\n        onDrop={e => onTaskDrop(id, e)}\n        getChildPayload={index => getTaskPayload(id, index)}\n        dragClass=\"card-ghost\"\n        dropClass=\"card-ghost-drop\"\n        onDragEnter={() => {\n          console.log(\"drag enter:\", id);\n        }}\n        onDragLeave={() => {\n          console.log(\"drag leave:\", id);\n        }}\n        onDropReady={p => console.log('Drop ready: ', p)}\n        dropPlaceholder={{\n          animationDuration: 150,\n          showOnTop: true,\n          className: 'drop-preview'\n        }}\n      >\n        {\n          sortItemsByPositions(tasks, positions).map((task: ITask) => {\n            return (\n              <Draggable key={task.id}>\n                <Task\n                  taskId={task.id}\n                  title={task.title}\n                  columnId={+id}\n                  priority={task.priority}\n                  description={task.description}\n                />\n              </Draggable>);\n          })\n        }\n      </Container>\n      <StyledFooter onClick={addTaskHandler}>\n        <StyledIcon src={plusIcon} alt=\"add_icon\" />\n        <p>Add to card</p>\n      </StyledFooter>\n      <TaskCreateForm\n        open={formActive}\n        setOpen={setFormActive}\n        dialogTitle='New task'\n        dialogContentText='Enter task desription'\n        label='Task'\n        getData={getData}\n      />\n      <ColumnsEditForm\n        title={title}\n        columnId={id}\n        deskId={deskId}\n        open={editFormActive}\n        setOpen={setEditFormActive}\n      />\n    </StyledColumn>\n  );\n}\n\nconst StyledColumn = styled.div`\n  min-height: 30px;\n  height: fit-content;\n  width: 300px;\n  background-color: #ebecf0;\n  border-radius: 5px;\n  margin: 10px;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n  box-shadow: 0px 3px 12px 1px #8b8b8b;\n  flex-shrink: 0;\n`;\n\nconst StyledColumnHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 8px;\n`;\n\nconst StyledColumnTitle = styled.div`\n  width: 85%;\n  cursor: pointer;\n`;\n\nconst StyledColumnMenu = styled.div`\n  width: 25px;\n  height: 25px;\n  border-radius: 3px;\n  text-align: center;\n  cursor: pointer;\n  position: relative;\n  background-image: url(${editIcon});\n  background-size: 15px;\n  background-repeat: no-repeat;\n  background-position: center;\n\n  &:hover .styled-menu {\n    visibility: visible;\n    width: fit-content;\n    min-height: 50px;\n  }\n`;\n\nconst StyledMenu = styled.div`\n  padding: 5px;\n  left: 25px;\n  position: absolute;\n  display: inline-block;\n  background-color: rgba(10, 10, 10, .7);\n  border-radius: 5px;\n  z-index: 1;\n  visibility: hidden;\n`;\n\nconst StyledColumnButton = styled.div`\n  padding: 10px 18px;\n  background-color: transparent;\n  color: #eee;\n  border-radius: 5px;\n  \n  &:hover {\n    background-color: #7c7c7c;\n  }\n`;\n\nconst StyledFooter = styled.button`\n  display: flex;\n  justify-content: flex-start;\n  padding: 5px;\n  margin: 5px 0;\n  border:none;\n  border-radius: 3px;\n  color: #888;\n  font-size: 15px;\n  box-shadow: 0px 1px 6px -3px #444;\n  transition: .2s;\n  cursor: pointer;\n  \n  &:hover {\n    box-shadow: 0px 1px 6px -1px #0068a2;\n  }\n`;\n\nconst StyledIcon = styled.img`\n  width: 16px;\n  margin-right: 10px;\n  opacity: .3;\n`;","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/index.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/reportWebVitals.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/App.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/store.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/SignIn.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/SignUp.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/Main.tsx",["217","218","219","220","221"],[],"import React from 'react';\nimport { Avatar, Box, Button, Container, Typography } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { styled } from '@mui/styles';\nimport { useAppSelector } from '../store/hooks';\n\nexport const Mainpage: React.FC = () => {\n  const isAuth = useAppSelector(state => state.users.isAuth);\n\n  return (\n    <>\n      {!isAuth ? \n    <StyledContainer>\n      <StyledTypography\n        variant=\"h5\"\n        gutterBottom>\n        Trello поможет организовать что угодно: от этапов крупного проекта до мелких задач. \n        Работайте вместе откуда угодно, даже с мобильных телефонов. ... Trello помогает командам эффективно решать рабочие задачи. \n        Работайте в команде, управляйте проектами и выводите продуктивность на новый уровень собственным уникальным способом вместе с Trello. \n        Зарегистрируйтесь — это бесплатно!\n      </StyledTypography>\n    </StyledContainer>\n    : <Navigate to='/profile' />}\n    </>\n)};\n\nconst StyledContainer = styled(Container)({\n  display: 'flex',\n  justifyContent: 'center',\n  padding: '30px 30px',\n});\n\nconst StyledTypography = styled(Typography)({\n  textAlign: 'center',\n  display: 'flex',\n  flexDirection: 'column',\n});\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/NotFound.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/pages/Profile.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/hoc/PrivateRouter.tsx",["222","223","224"],[],"import { Navigate, Outlet, Route, RoutesProps, useLocation } from \"react-router\"\nimport { store } from \"../store/store\";\n\nexport const PrivateRoute = ({ children }: { children: JSX.Element }) => {\n  const location = useLocation();\n  // const isAuth = false;\n  const isAuth = store.getState().users['isAuth'];\n\n  if (isAuth) {\n    return children;\n  }\n  return <Navigate to='/signin' state={ {from: location} } />;\n}\n\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/hooks.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/BoardHeader.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/CreatingForm.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/FormItem.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/config/index.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/Task.tsx",["225"],[],"import React, { useState } from 'react';\nimport { Draggable } from 'react-smooth-dnd';\nimport styled from 'styled-components';\nimport editIcon from '../img/edit.svg';\nimport { TaskEditForm } from './TaskEditForm';\n\ninterface TaskProps {\n  taskId: number;\n  title: string;\n  description: string;\n  columnId: number;\n  priority: number;\n};\n\nexport const Task: React.FC<TaskProps> = ({ title, columnId, taskId, priority, description }) => {\n  const [taskEditActive, setTaskEditActive] = useState(false);\n\n  const onClickHandler = () => {\n    setTaskEditActive(true);\n  }\n\n  type ColorType = {[key: number]: string;}\n  const Colors: ColorType = {\n    1: 'initial;',\n    2: '#6bda21;',\n    3: '#e7e432;',\n    4: '#e7772c;',\n    5: '#f90000;',\n  };\n\n  return (\n    \n      <StyledTask\n        color={Colors[priority]}\n      >\n        <StyledOverlay\n          className='task-overlay'\n          onClick={onClickHandler}\n        />\n        <StyledP>{title}</StyledP>\n      <TaskEditForm \n        open={taskEditActive}\n        setOpen={setTaskEditActive}\n        taskId={taskId}\n        priority={priority}\n        title={title}\n        description={description}\n      />\n      </StyledTask>\n  );\n};\n\nconst StyledTask = styled.div<{color: string;}>`\n  position: relative;\n  padding: 5px;\n  margin: 5px 0;\n  background-color: ${props => props.color};\n  border-radius: 3px;\n  box-shadow: 0px 1px 6px -1px #444;\n  cursor: pointer;\n\n  &:hover .task-overlay {\n    opacity: 1;\n  }\n`;\n\nconst StyledP = styled.p`\n  word-wrap: break-word;\n  padding-right: 15px;\n`;\n\nconst StyledOverlay = styled.div`\n  opacity: 0;\n  position: absolute;\n  transition: .2s;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: inherit;\n  background-image: url(${editIcon});\n  background-position: 98%;\n  background-size: 8%;\n  background-repeat: no-repeat;\n  background-color: rgba(170, 170, 170, 0.3);\n`;","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/EditProfileForm.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/CreateItem.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/columnActions.ts",["226"],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/asyncActions/taskAction.ts",["227","228"],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/TaskEditForm.tsx",["229","230"],[],"import React from 'react';\nimport Button from '@mui/material/Button';\nimport Slider, { SliderThumb } from '@mui/material/Slider';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { IEditData } from '../types/editProfile';\nimport { useAppDispatch } from '../store/hooks';\nimport { fetchDeleteTask, fetchEditTask } from '../store/asyncActions/taskAction';\nimport { styled } from '@mui/styles';\nimport { Typography } from '@mui/material';\n\ninterface FormProps {\n  open: boolean;\n  setOpen: (flag: boolean) => void;\n  taskId: number;\n  priority: number;\n  title: string;\n  description: string;\n};\n\ninterface IEditTask {\n  id: number;\n  columnId?: number;\n  title?: string;\n  description?: string;\n  priority?: number;\n  position?: number;\n};\n\nexport const TaskEditForm: React.FC<FormProps> = ({open, setOpen, taskId, priority, title, description}) => {\n  const dispatch = useAppDispatch();\n\n  const handleDelete = () => {\n    setOpen(false);\n    dispatch(fetchDeleteTask({id: taskId}));\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleEdit = () => {\n    setOpen(false);\n    const taskTitle: HTMLInputElement | null = document.querySelector('#taskTitle');\n    const prioritySlider: HTMLInputElement | null = document.querySelector('#prioritySlider');\n    const taskDescription: HTMLInputElement | null = document.querySelector('#taskDescription');\n    const data: IEditTask = { id: taskId };\n    if (taskTitle?.value.trim()) data.title = taskTitle?.value.trim();\n    if (prioritySlider?.innerText) data.priority = +prioritySlider?.innerText;\n    if (taskDescription?.value) data.description = taskDescription?.value.trim();\n    dispatch(fetchEditTask(data));\n  };\n\n  return (\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>Edit Task</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            id=\"taskTitle\"\n            label=\"Title\"\n            type=\"text\"\n            fullWidth\n            defaultValue={title}\n            variant=\"standard\"\n            inputProps={{\n              maxLength: 255,\n            }}\n          />\n          <TextField\n            sx={{marginTop: '19px;'}}\n            id=\"taskDescription\"\n            label=\"Description\"\n            multiline\n            type=\"text\"\n            fullWidth\n            defaultValue={description}\n            variant=\"standard\"\n            inputProps={{\n              maxLength: 255,\n            }}\n          />\n          <Typography \n            sx={{marginTop: '19px;'}}\n            gutterBottom>Priority</Typography>\n          <PrettoSlider\n            id='prioritySlider'\n            valueLabelDisplay=\"auto\"\n            aria-label=\"pretto slider\"\n            defaultValue={priority}\n            min={1}\n            max={5}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"error\" variant=\"text\" onClick={handleDelete}>Delete</Button>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleEdit}>Edit</Button>\n        </DialogActions>\n      </Dialog>\n  );\n};\n\nconst PrettoSlider = styled(Slider)({\n  color: '#3067bb',\n  height: 8,\n  '& .MuiSlider-track': {\n    border: 'none',\n  },\n  '& .MuiSlider-thumb': {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n      boxShadow: 'inherit',\n    },\n    '&:before': {\n      display: 'none',\n    },\n  },\n  '& .MuiSlider-valueLabel': {\n    lineHeight: 1.2,\n    fontSize: 12,\n    background: 'unset',\n    padding: 0,\n    width: 32,\n    height: 32,\n    borderRadius: '50% 50% 50% 0',\n    backgroundColor: '#205cb6',\n    transformOrigin: 'bottom left',\n    transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',\n    '&:before': { display: 'none' },\n    '&.MuiSlider-valueLabelOpen': {\n      transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',\n    },\n    '& > *': {\n      transform: 'rotate(45deg)',\n    },\n  },\n});\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/columnSlicer.ts",["231"],[],"import { createSlice, Slice, PayloadAction } from '@reduxjs/toolkit';\nimport { IColumn } from '../../types/column';\nimport type { RootState } from '../store';\n\ninterface ColumnState {\n  columns: IColumn[];\n};\n\nconst initialState = {\n  columns: [],\n} as ColumnState;\n\nexport const columnSlice: Slice = createSlice({\n  name: 'column',\n  initialState,\n  reducers: {\n    setOneColumn: (state, action: PayloadAction<IColumn>) => {\n      state.columns.push(action.payload);\n    },\n    updateOneColumn: (state, action: PayloadAction<IColumn>) => {\n      const index = state.columns.findIndex((column: IColumn) => column.id === action.payload.id);\n      state.columns[index] = action.payload;\n    },\n    setColumns: (state, action: PayloadAction<IColumn[]>) => {\n      state.columns = action.payload;\n    },\n    updateTaskPositions: (state, action: PayloadAction<{id: number, pos: number[]}>) => {\n      const index = state.columns.findIndex((column: IColumn) => column.id === action.payload.id);\n      state.columns[index].positions = action.payload.pos;\n    },\n    setNewTaskPositionInArray: (state, action: PayloadAction<{columnId: number, taskId: number}>) => {\n      const index = state.columns.findIndex((column: IColumn) => column.id === action.payload.columnId);\n      state.columns[index].positions.push(action.payload.taskId);\n    },\n    resetColumns: (state) => {\n      state.columns = null;\n    },\n    editColumn: (state, action: PayloadAction<IColumn>) => {\n      const updatedColumn = action.payload;\n      state.columns.map((column: IColumn) => {\n        if (column.id === updatedColumn.id) {\n          column.title = updatedColumn.title;\n          column.deskId = updatedColumn.deskId;\n          column.positions = updatedColumn.positions;\n        }\n      });\n    },\n    deleteColumn: (state, action: PayloadAction<{ id: number; }>) => {\n      const index = state.columns.findIndex((column: IColumn) => column.id === +action.payload);\n      state.columns.splice(index, 1);\n    },    \n  },\n});\n\nexport const { \n  addColumns, \n  editColumn, \n  deleteColumn,\n  setColumns,\n  setOneColumn,\n  updateOneColumn,\n  updateTaskPositions,\n  setNewTaskPositionInArray,\n  resetColumns,\n} = columnSlice.actions;\n\nexport const getColumns = (state: RootState) => state.columns.columns;\n\nexport default columnSlice.reducer;\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/userSlicer.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/taskSlicer.ts",["232","233"],[],"import { positions } from '@mui/system';\nimport { createSlice, Slice, PayloadAction } from '@reduxjs/toolkit';\nimport { ITask } from '../../types/task';\nimport type { RootState } from '../store';\n\ninterface TaskState {\n  tasks: ITask[];\n};\n\nconst initialState = {\n  tasks: [],\n} as TaskState;\n\n\nexport const taskSlice: Slice = createSlice({\n  name: 'task',\n  initialState,\n  reducers: {\n    setOneTask: (state, action: PayloadAction<ITask>) => {\n      state.tasks.push(action.payload);\n    },\n    setTasks: (state, action: PayloadAction<ITask[]>) => {\n      state.tasks = action.payload;\n    },\n    resetTasks: (state) => {\n      state.tasks = null;\n    },\n    editTask: (state, action: PayloadAction<ITask>) => {\n      const updatedTask = action.payload;\n      state.tasks.map((task: ITask) => {\n        if (task.id === updatedTask.id) {\n          task.title = updatedTask.title;\n          task.description = updatedTask.description;\n          task.columnId = updatedTask.columnId;\n          task.position = updatedTask.position;\n          task.priority = updatedTask.priority;\n        }\n      });\n    },\n    deleteTask: (state, action: PayloadAction<number>) => {\n      const index = state.tasks.findIndex((task: { id: number; }) => task.id === action.payload);\n      state.tasks.splice(index, 1);\n    },\n    moveTask: (state, action: PayloadAction<{ id: number; columnId: number; }>) => {\n      state.tasks.find((task: { id: number; }) => task.id === action.payload.id).columnId = action.payload.columnId;\n    },\n  },\n});\n\nexport const { \n  addTask, \n  editTask, \n  deleteTask,\n  setOneTask,\n  setTasks,\n  resetTasks,\n  moveTask,\n} = taskSlice.actions;\n\nexport const getTasks = (state: RootState) => state.tasks.tasks;\n\nexport default taskSlice.reducer;\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/store/slicers/deskSlicer.ts",["234","235"],[],"import { createSlice, Slice, PayloadAction } from '@reduxjs/toolkit';\nimport { IDesk } from '../../types/desk';\nimport { fetchAddDesk } from '../asyncActions/deskActions';\nimport type { RootState } from '../store';\n\ninterface DeskState {\n  desks: IDesk[];\n};\n\nconst initialState = {\n  desks: [],\n} as DeskState;\n\nexport const deskSlice: Slice = createSlice({\n  name: 'desk',\n  initialState,\n  reducers: {\n    // addDesk: (state, action: PayloadAction<string>) => {\n    //   const desk: IDesk = {\n    //     id: `d${Date.now()}`,\n    //     title: action.payload,\n    //   };\n\n    //   state.desks.push(desk);\n    // },\n    setDesks: (state, action: PayloadAction<IDesk[]>) => {\n      state.desks = action.payload;\n    },\n    setOneDesk: (state, action: PayloadAction<IDesk>) => {\n      state.desks.push(action.payload);\n    },\n    updateOneDesk: (state, action: PayloadAction<IDesk>) => {\n      const index = state.desks.findIndex((desk: IDesk) => desk.id === action.payload.id);\n      state.desks[index] = action.payload;\n    },\n    updateColumnPositions: (state, action: PayloadAction<{id: number, pos: number[]}>) => {\n      const index = state.desks.findIndex((desks: IDesk) => desks.id === action.payload.id);\n      state.desks[index].positions = action.payload.pos;\n    },\n    setNewColumnPositionInArray: (state, action: PayloadAction<{deskId: number, columnId: number}>) => {\n      const index = state.desks.findIndex((desks: IDesk) => desks.id === action.payload.deskId);\n      state.desks[index].positions.push(action.payload.columnId);\n    },\n    resetDesks: (state) => {\n      state.desks = null;\n    },\n    editDesk: (state, action: PayloadAction<IDesk>) => {\n      const updatedDesk = action.payload;\n      state.desks.map((desk: IDesk) => {\n        if (desk.id === updatedDesk.id) {\n          desk.title = updatedDesk.title;\n          desk.positions = updatedDesk.positions;\n        }\n      });\n    },\n    deleteDesk: (state, action: PayloadAction<{ id: string; }>) => {\n      const index = state.desks.findIndex((column: IDesk) => column.id === +action.payload);\n      state.desks.splice(index, 1);\n    },\n  },\n  // extraReducers: (builder) => {\n  //   // Add desk\n  //   builder.addCase(fetchAddDesk.fulfilled, (state, action: PayloadAction<IDesk>) => {\n  //     state.desks.push(action.payload);      \n  //   });\n  //   // Get desk\n  //   builder.addCase(fetchGetDesk.fulfilled, (state, action: any) => {\n  //     // state.desks.push(action.payload);\n  //   })\n  // }\n});\n\nexport const {\n  addDesk, \n  editDesk, \n  deleteDesk,\n  setOneDesk,\n  updateOneDesk,\n  setDesks,\n  updateColumnPositions,\n  setNewColumnPositionInArray,\n  resetDesks,\n} = deskSlice.actions;\n\nexport const getDesks = (state: RootState) => state.desks.desks;\n\nexport default deskSlice.reducer;\n","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/ColumnEditForm.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/DeskEditForm.tsx",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/components/TaskCreateForm.tsx",["236","237"],[],"import React, { useRef } from 'react';\nimport { Button, Slider, Typography } from '@mui/material/';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { styled } from '@mui/styles';\nimport { useAppDispatch } from '../store/hooks';\n\ninterface FormProps {\n  open: boolean;\n  setOpen: (flag: boolean) => void;\n  dialogTitle: string;\n  dialogContentText: string;\n  label: string;\n  getData: (title: string, priority: number) => void;\n}\n\nexport const TaskCreateForm: React.FC<FormProps> = ({ open, setOpen, getData, dialogTitle, dialogContentText, label }) => {\n  const dispatch = useAppDispatch();\n  \n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCreate = () => {\n    setOpen(false);\n    const taskTitle: HTMLInputElement | null = document.querySelector('#taskTitle');\n    const prioritySlider: HTMLInputElement | null = document.querySelector('#prioritySlider');\n    const title = taskTitle?.value.trim() || '';\n    const priority = prioritySlider?.innerText || 1;\n    getData(title, +priority);\n  };\n\n  return (\n    <Dialog open={open} onClose={handleClose}>\n      <DialogTitle>{dialogTitle}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {dialogContentText}\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"taskTitle\"\n          label={label}\n          type=\"text\"\n          fullWidth\n          variant=\"standard\"\n          inputProps={{\n            maxLength: 255,\n          }}\n        />\n        <Typography \n            sx={{marginTop: '19px;'}}\n            gutterBottom>Priority</Typography>\n        <PrettoSlider\n          id='prioritySlider'\n          valueLabelDisplay=\"auto\"\n          aria-label=\"pretto slider\"\n          defaultValue={1}\n          min={1}\n          max={5}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose}>Cancel</Button>\n        <Button onClick={handleCreate}>Create</Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst PrettoSlider = styled(Slider)({\n  color: '#3067bb',\n  height: 8,\n  '& .MuiSlider-track': {\n    border: 'none',\n  },\n  '& .MuiSlider-thumb': {\n    height: 24,\n    width: 24,\n    backgroundColor: '#fff',\n    border: '2px solid currentColor',\n    '&:focus, &:hover, &.Mui-active, &.Mui-focusVisible': {\n      boxShadow: 'inherit',\n    },\n    '&:before': {\n      display: 'none',\n    },\n  },\n  '& .MuiSlider-valueLabel': {\n    lineHeight: 1.2,\n    fontSize: 12,\n    background: 'unset',\n    padding: 0,\n    width: 32,\n    height: 32,\n    borderRadius: '50% 50% 50% 0',\n    backgroundColor: '#205cb6',\n    transformOrigin: 'bottom left',\n    transform: 'translate(50%, -100%) rotate(-45deg) scale(0)',\n    '&:before': { display: 'none' },\n    '&.MuiSlider-valueLabelOpen': {\n      transform: 'translate(50%, -100%) rotate(-45deg) scale(1)',\n    },\n    '& > *': {\n      transform: 'rotate(45deg)',\n    },\n  },\n});","/home/fusion/Documents/NikolayDimitrenko/trello-client/src/services/utils/itemsOrder.ts",[],[],"/home/fusion/Documents/NikolayDimitrenko/trello-client/src/services/api/index.ts",[],[],{"ruleId":"238","severity":1,"message":"239","line":2,"column":42,"nodeType":"240","messageId":"241","endLine":2,"endColumn":46},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","replacedBy":"245"},{"ruleId":"238","severity":1,"message":"246","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":31},{"ruleId":"238","severity":1,"message":"247","line":8,"column":10,"nodeType":"240","messageId":"241","endLine":8,"endColumn":24},{"ruleId":"238","severity":1,"message":"248","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"238","severity":1,"message":"249","line":9,"column":24,"nodeType":"240","messageId":"241","endLine":9,"endColumn":37},{"ruleId":"238","severity":1,"message":"250","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":16},{"ruleId":"238","severity":1,"message":"251","line":2,"column":18,"nodeType":"240","messageId":"241","endLine":2,"endColumn":21},{"ruleId":"238","severity":1,"message":"252","line":2,"column":23,"nodeType":"240","messageId":"241","endLine":2,"endColumn":29},{"ruleId":"238","severity":1,"message":"253","line":3,"column":10,"nodeType":"240","messageId":"241","endLine":3,"endColumn":21},{"ruleId":"238","severity":1,"message":"254","line":4,"column":20,"nodeType":"240","messageId":"241","endLine":4,"endColumn":31},{"ruleId":"238","severity":1,"message":"255","line":1,"column":20,"nodeType":"240","messageId":"241","endLine":1,"endColumn":26},{"ruleId":"238","severity":1,"message":"256","line":1,"column":28,"nodeType":"240","messageId":"241","endLine":1,"endColumn":33},{"ruleId":"238","severity":1,"message":"257","line":1,"column":35,"nodeType":"240","messageId":"241","endLine":1,"endColumn":46},{"ruleId":"238","severity":1,"message":"258","line":2,"column":10,"nodeType":"240","messageId":"241","endLine":2,"endColumn":19},{"ruleId":"238","severity":1,"message":"259","line":4,"column":36,"nodeType":"240","messageId":"241","endLine":4,"endColumn":46},{"ruleId":"238","severity":1,"message":"260","line":4,"column":32,"nodeType":"240","messageId":"241","endLine":4,"endColumn":40},{"ruleId":"238","severity":1,"message":"261","line":51,"column":13,"nodeType":"240","messageId":"241","endLine":51,"endColumn":21},{"ruleId":"238","severity":1,"message":"262","line":3,"column":18,"nodeType":"240","messageId":"241","endLine":3,"endColumn":29},{"ruleId":"238","severity":1,"message":"263","line":9,"column":10,"nodeType":"240","messageId":"241","endLine":9,"endColumn":19},{"ruleId":"264","severity":1,"message":"265","line":40,"column":43,"nodeType":"266","messageId":"267","endLine":40,"endColumn":45},{"ruleId":"238","severity":1,"message":"268","line":1,"column":10,"nodeType":"240","messageId":"241","endLine":1,"endColumn":19},{"ruleId":"264","severity":1,"message":"265","line":30,"column":37,"nodeType":"266","messageId":"267","endLine":30,"endColumn":39},{"ruleId":"238","severity":1,"message":"269","line":3,"column":10,"nodeType":"240","messageId":"241","endLine":3,"endColumn":22},{"ruleId":"264","severity":1,"message":"265","line":49,"column":37,"nodeType":"266","messageId":"267","endLine":49,"endColumn":39},{"ruleId":"238","severity":1,"message":"270","line":1,"column":17,"nodeType":"240","messageId":"241","endLine":1,"endColumn":23},{"ruleId":"238","severity":1,"message":"271","line":22,"column":9,"nodeType":"240","messageId":"241","endLine":22,"endColumn":17},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["272"],"no-negated-in-lhs",["273"],"'SyntheticEvent' is defined but never used.","'fetchAddColumn' is defined but never used.","'useEffect' is defined but never used.","'fetchEditTask' is defined but never used.","'Avatar' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'useDispatch' is defined but never used.","'useNavigate' is defined but never used.","'Outlet' is defined but never used.","'Route' is defined but never used.","'RoutesProps' is defined but never used.","'Draggable' is defined but never used.","'setColumns' is defined but never used.","'moveTask' is defined but never used.","'response' is assigned a value but never used.","'SliderThumb' is defined but never used.","'IEditData' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'positions' is defined but never used.","'fetchAddDesk' is defined but never used.","'useRef' is defined but never used.","'dispatch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]